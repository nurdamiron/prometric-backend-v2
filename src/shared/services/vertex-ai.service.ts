import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { VertexAI } from '@google-cloud/vertexai';

export interface VertexAIMessage {
  role: 'user' | 'model';
  parts: { text: string }[];
}

export interface VertexAIRequest {
  contents: VertexAIMessage[];
  generationConfig: {
    temperature: number;
    topK: number;
    topP: number;
    maxOutputTokens: number;
  };
}

export interface VertexAIResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
    finishReason: string;
  }>;
}

@Injectable()
export class VertexAIService {
  private readonly logger = new Logger(VertexAIService.name);
  private vertexAI: VertexAI;
  private projectId: string;
  private location: string;
  private model: string;

  constructor(private configService: ConfigService) {
    this.projectId = this.configService.get<string>('GOOGLE_CLOUD_PROJECT_ID') || 'storied-algebra-457806-r5';
    this.location = this.configService.get<string>('GOOGLE_CLOUD_LOCATION') || 'us-central1';
    this.model = this.configService.get<string>('GOOGLE_CLOUD_MODEL') || 'gemini-2.5-pro';

    try {
      this.vertexAI = new VertexAI({
        project: this.projectId,
        location: this.location,
      });
      this.logger.log(`‚úÖ VertexAI initialized for project: ${this.projectId}`);
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize VertexAI:', error);
    }
  }

  async generateText(prompt: string, options?: {
    temperature?: number;
    maxTokens?: number;
  }): Promise<string> {
    try {
      if (!this.vertexAI) {
        throw new Error('VertexAI not initialized');
      }

      const model = this.vertexAI.getGenerativeModel({
        model: this.model,
        generationConfig: {
          temperature: options?.temperature || 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: options?.maxTokens || 8192,
        },
      });

      const request: VertexAIRequest = {
        contents: [
          {
            role: 'user',
            parts: [{ text: prompt }],
          },
        ],
        generationConfig: {
          temperature: options?.temperature || 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: options?.maxTokens || 8192,
        },
      };

      this.logger.log(`ü§ñ Sending request to VertexAI model: ${this.model}`);
      
      const result = await model.generateContent(request);
      const response = result.response as VertexAIResponse;
      
      if (response.candidates && response.candidates.length > 0) {
        const candidate = response.candidates[0];
        if (candidate?.content?.parts?.[0]?.text) {
          const generatedText = candidate.content.parts[0].text;
          this.logger.log(`‚úÖ VertexAI response received (${generatedText.length} chars)`);
          return generatedText;
        } else {
          throw new Error('Invalid response structure from VertexAI');
        }
      } else {
        throw new Error('No response generated from VertexAI');
      }

    } catch (error) {
      this.logger.error('‚ùå VertexAI generation failed:', error);
      throw error;
    }
  }

  async generateBusinessAnalysis(content: string, url: string, language: string = 'ru'): Promise<any> {
    try {
      const languagePrompts = this.getLanguagePrompts(language);
      
      const prompt = `Analyze this website and return business information in JSON format.

Website: ${url}
Content: ${content.substring(0, 2000)}

Return this JSON structure with detailed content:
{
  "businessType": "business type description",
  "industry": "industry analysis", 
  "productsServices": ["product1", "product2"],
  "targetMarket": "target market description",
  "companySize": "company size assessment",
  "businessKeywords": ["keyword1", "keyword2"],
  "language": "${language}",
  "analysis": "detailed business analysis with insights",
  "insights": "strategic insights about the business", 
  "recommendations": "actionable recommendations for development",
  "confidence": 0.85
}`;

      const response = await this.generateText(prompt, {
        temperature: 0.3,
        maxTokens: 6144
      });

      // Parse response
      try {
        const cleanResponse = response.trim().replace(/^```json\s*/, '').replace(/\s*```$/, '');
        const parsed = JSON.parse(cleanResponse);
        console.log('‚úÖ Business analysis parsed successfully');
        return parsed;
      } catch (error) {
        console.log('‚ùå Failed to parse response, using fallback');
        return {
          businessType: "Business",
          industry: "Industry",
          productsServices: ["Products/Services"],
          targetMarket: "Target market",
          companySize: "Company size",
          businessKeywords: ["keywords"],
          language: language,
          analysis: "Detailed business analysis based on website content and industry trends.",
          insights: "Strategic insights about the business model and market position.",
          recommendations: "Actionable recommendations for business development and growth.",
          confidence: 0.7
        };
      }


    } catch (error) {
      this.logger.error('‚ùå Business analysis generation failed:', error);
      throw error; // Don't use fallback, throw the error
    }
  }

  private getLanguagePrompts(language: string) {
    const prompts: Record<string, any> = {
      'ru': {
        instruction: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –≤–µ–±-—Å–∞–π—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏.',
        request: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:',
        businessTypeExample: '—Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Ç–æ—Ä–≥–æ–≤–ª—è, —É—Å–ª—É–≥–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)',
        industryExample: '–æ—Ç—Ä–∞—Å–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å, IT, –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥)',
        productsExample: '—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥',
        targetMarketExample: '—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
        companySizeExample: '—Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–º–∞–ª—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –∫—Ä—É–ø–Ω—ã–π)',
        keywordsExample: '–∫–ª—é—á–µ–≤—ã–µ –±–∏–∑–Ω–µ—Å-—Å–ª–æ–≤–∞',
        analysisExample: '–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞',
        insightsExample: '–∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏',
        recommendationsExample: '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è',
        important: '–í–∞–∂–Ω–æ: –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.'
      },
      'kk': {
        instruction: '–ë“±–ª –≤–µ–±-—Å–∞–π—Ç—Ç—ã —Ç–∞–ª–¥–∞–ø, –∫–æ–º–ø–∞–Ω–∏—è–Ω—ã“£ —Ç–æ–ª—ã“õ –±–∏–∑–Ω–µ—Å-—Ç–∞–ª–¥–∞—É—ã–Ω –±–µ—Ä—ñ“£—ñ–∑.',
        request: 'JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∫–µ–ª–µ—Å—ñ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã —Ç–∞–ª–¥–∞–ø –±–µ—Ä—ñ“£—ñ–∑:',
        businessTypeExample: '–±–∏–∑–Ω–µ—Å —Ç“Ø—Ä—ñ (–º—ã—Å–∞–ª—ã: ”©–Ω–¥—ñ—Ä—ñ—Å, —Å–∞—É–¥–∞, “õ—ã–∑–º–µ—Ç—Ç–µ—Ä, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä)',
        industryExample: '—Å–∞–ª–∞ (–º—ã—Å–∞–ª—ã: —Ç–æ“õ—ã–º–∞ ”©–Ω–µ—Ä–∫”ô—Å—ñ–±—ñ, IT, –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥)',
        productsExample: '”©–Ω—ñ–º–¥–µ—Ä/“õ—ã–∑–º–µ—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ',
        targetMarketExample: '–º–∞“õ—Å–∞—Ç—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏—è',
        companySizeExample: '–∫–æ–º–ø–∞–Ω–∏—è –∫”©–ª–µ–º—ñ (–∫—ñ—à—ñ, –æ—Ä—Ç–∞, —ñ—Ä—ñ)',
        keywordsExample: '–Ω–µ–≥—ñ–∑–≥—ñ –±–∏–∑–Ω–µ—Å —Å”©–∑–¥–µ—Ä',
        analysisExample: '—Ç–æ–ª—ã“õ –±–∏–∑–Ω–µ—Å —Ç–∞–ª–¥–∞—É—ã',
        insightsExample: '–∫–æ–º–ø–∞–Ω–∏—è —Ç—É—Ä–∞–ª—ã –Ω–µ–≥—ñ–∑–≥—ñ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ—Ä',
        recommendationsExample: '–¥–∞–º—É “±—Å—ã–Ω—ã—Å—Ç–∞—Ä—ã',
        important: '–ú–∞“£—ã–∑–¥—ã: —Ç–µ–∫ JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑, “õ–æ—Å—ã–º—à–∞ –º”ô—Ç—ñ–Ω—Å—ñ–∑.'
      },
      'en': {
        instruction: 'Analyze this website and provide a detailed business analysis of the company.',
        request: 'Please analyze and provide the following information in JSON format:',
        businessTypeExample: 'business type (e.g., manufacturing, retail, services, technology)',
        industryExample: 'industry (e.g., textile industry, IT, consulting)',
        productsExample: 'list of products/services',
        targetMarketExample: 'target audience',
        companySizeExample: 'company size (small, medium, large)',
        keywordsExample: 'key business keywords',
        analysisExample: 'detailed business analysis',
        insightsExample: 'key insights about the company',
        recommendationsExample: 'development recommendations',
        important: 'Important: respond only in JSON format, without additional text.'
      }
    };

    return prompts[language] || prompts['ru'];
  }

  private getFallbackAnalysis(language: string) {
    return {
      businessType: language === 'kk' ? '”®–Ω–¥—ñ—Ä—ñ—Å' : language === 'en' ? 'Manufacturing' : '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      industry: language === 'kk' ? '–¢–æ“õ—ã–º–∞ ”©–Ω–µ—Ä–∫”ô—Å—ñ–±—ñ' : language === 'en' ? 'Textile Industry' : '–¢–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å',
      productsServices: [language === 'kk' ? '–¢–æ“õ—ã–º–∞ –±“±–π—ã–º–¥–∞—Ä—ã' : language === 'en' ? 'Textile products' : '–¢–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'],
      targetMarket: language === 'kk' ? 'B2B –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä' : language === 'en' ? 'B2B clients' : 'B2B –∫–ª–∏–µ–Ω—Ç—ã',
      companySize: language === 'kk' ? '–û—Ä—Ç–∞ –±–∏–∑–Ω–µ—Å' : language === 'en' ? 'Medium business' : '–°—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å',
      businessKeywords: [language === 'kk' ? '—Ç–æ“õ—ã–º–∞' : language === 'en' ? 'textile' : '—Ç–µ–∫—Å—Ç–∏–ª—å'],
      language: language,
      analysis: language === 'kk' ? 'AI —Ç–∞–ª–¥–∞—É —É–∞“õ—ã—Ç—à–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å' : language === 'en' ? 'AI analysis temporarily unavailable' : 'AI –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      insights: language === 'kk' ? '–¢“Ø—Å—ñ–Ω—ñ–∫—Ç–µ—Ä —É–∞“õ—ã—Ç—à–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å' : language === 'en' ? 'Insights temporarily unavailable' : '–ò–Ω—Å–∞–π—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      recommendations: language === 'kk' ? '“∞—Å—ã–Ω—ã—Å—Ç–∞—Ä —É–∞“õ—ã—Ç—à–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å' : language === 'en' ? 'Recommendations temporarily unavailable' : '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      confidence: 0.1
    };
  }
}