import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import OpenAI from 'openai';

@Injectable()
export class RealAiService {
  private openai: OpenAI;

  constructor(private configService: ConfigService) {
    const apiKey = this.configService.get<string>('OPENAI_API_KEY');

    if (apiKey) {
      this.openai = new OpenAI({
        apiKey: apiKey,
      });
    }
  }

  async chatWithAssistant(
    message: string,
    assistantConfig: {
      assistantName: string;
      personality: string;
      expertise: string[];
      voicePreference: string;
    },
    context?: string,
    organizationData?: any
  ) {
    try {
      // If OpenAI is not configured, return enhanced mock
      if (!this.openai) {
        return this.generateEnhancedMockResponse(message, assistantConfig, context, organizationData);
      }

      // Build system prompt based on assistant configuration
      const systemPrompt = this.buildSystemPrompt(assistantConfig, organizationData);

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: message
          }
        ],
        max_tokens: 500,
        temperature: this.getTemperatureForPersonality(assistantConfig.personality),
      });

      const response = completion.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.';

      return {
        response: `${assistantConfig.assistantName}: ${response}`,
        assistant: assistantConfig.assistantName,
        timestamp: new Date().toISOString(),
        isRealAI: true,
        model: 'gpt-4',
        tokensUsed: completion.usage?.total_tokens || 0
      };

    } catch (error) {
      console.error('OpenAI API Error:', error);

      // Fallback to enhanced mock on error
      return this.generateEnhancedMockResponse(message, assistantConfig, context, organizationData);
    }
  }

  private buildSystemPrompt(assistantConfig: any, organizationData?: any): string {
    const basePrompt = `–¢—ã - ${assistantConfig.assistantName}, ${this.getPersonalityDescription(assistantConfig.personality)} AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–π CRM —Å–∏—Å—Ç–µ–º—ã Prometric.`;

    const expertisePrompt = `–¢–≤–æ—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –≤–∫–ª—é—á–∞–µ—Ç: ${assistantConfig.expertise.join(', ')}.`;

    const organizationPrompt = organizationData
      ? `–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π "${organizationData.name}" –≤ —Å—Ñ–µ—Ä–µ "${organizationData.industry}".`
      : '';

    const behaviorPrompt = this.getBehaviorPrompt(assistantConfig.personality);

    const contextPrompt = `
–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM —Å–∏—Å—Ç–µ–º—ã –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
–ë—É–¥—å helpful –∏ professional. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ç–æ—Ä–æ–π —É —Ç–µ–±—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–∞–∫ –µ—ë –ø–æ–ª—É—á–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ.
–ü–æ–º–Ω–∏ —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–º –±–∏–∑–Ω–µ—Å–æ–º, —É—á–∏—Ç—ã–≤–∞–π –º–µ—Å—Ç–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É.`;

    return [basePrompt, expertisePrompt, organizationPrompt, behaviorPrompt, contextPrompt]
      .filter(Boolean)
      .join(' ');
  }

  private getPersonalityDescription(personality: string): string {
    switch (personality) {
      case 'professional':
        return '–¥–µ–ª–æ–≤–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
      case 'friendly':
        return '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π';
      case 'analytical':
        return '–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏ –ª–æ–≥–∏—á–Ω—ã–π';
      case 'creative':
        return '–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π';
      case 'supportive':
        return '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π';
      default:
        return '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
    }
  }

  private getBehaviorPrompt(personality: string): string {
    switch (personality) {
      case 'professional':
        return '–û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.';
      case 'friendly':
        return '–ë—É–¥—å —Ç–µ–ø–ª—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.';
      case 'analytical':
        return '–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–∫—Ç–∞—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –∞–Ω–∞–ª–∏–∑.';
      case 'creative':
        return '–ü—Ä–µ–¥–ª–∞–≥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã.';
      case 'supportive':
        return '–ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º, –ø–æ–º–æ–≥–∞–π —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.';
      default:
        return '–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.';
    }
  }

  private getTemperatureForPersonality(personality: string): number {
    switch (personality) {
      case 'professional': return 0.3; // Conservative
      case 'friendly': return 0.7;     // Warm
      case 'analytical': return 0.2;   // Precise
      case 'creative': return 0.9;     // Creative
      case 'supportive': return 0.6;   // Balanced
      default: return 0.5;
    }
  }

  private generateEnhancedMockResponse(
    message: string,
    assistantConfig: any,
    context?: string,
    organizationData?: any
  ): any {
    // Enhanced mock with context awareness
    let response = '';

    const lowerMessage = message.toLowerCase();

    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('hello')) {
      response = `–ü—Ä–∏–≤–µ—Ç! –Ø ${assistantConfig.assistantName}, –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ú–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${assistantConfig.expertise.join(', ')}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
    } else if (lowerMessage.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || lowerMessage.includes('–æ—Ç—á–µ—Ç')) {
      response = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... ${organizationData ? `–î–ª—è ${organizationData.name}` : '–î–ª—è –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'} —è –º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, –∫–ª–∏–µ–Ω—Ç–∞–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ö–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—Ç—á–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`;
    } else if (lowerMessage.includes('–∫–ª–∏–µ–Ω—Ç') || lowerMessage.includes('customer')) {
      response = `–ü–æ –∫–ª–∏–µ–Ω—Ç–∞–º —É –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º CRM. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`;
    } else if (lowerMessage.includes('–ø—Ä–æ–¥–∞–∂') || lowerMessage.includes('sales')) {
      response = `–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –≥–æ—Ç–æ–≤–∞! –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π sales pipeline —Å —ç—Ç–∞–ø–∞–º–∏: –õ–∏–¥—ã ‚Üí –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Üí –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã ‚Üí –ó–∞–∫—Ä—ã—Ç–∏–µ. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂?`;
    } else if (lowerMessage.includes('–ø–æ–º–æ—â—å') || lowerMessage.includes('help')) {
      response = `–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å: üìä –ê–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö CRM, üìà –û—Ç—á–µ—Ç–∞–º–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º–∏, üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?`;
    } else {
      response = `–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: "${message}". ${this.getPersonalityResponse(assistantConfig.personality)} ${organizationData ? `–î–ª—è ${organizationData.name} ` : ''}–º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö CRM.`;
    }

    return {
      response: `${assistantConfig.assistantName}: ${response}`,
      assistant: assistantConfig.assistantName,
      timestamp: new Date().toISOString(),
      isRealAI: false,
      model: 'enhanced-mock',
      note: '–î–ª—è –ø–æ–ª–Ω–æ–π AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env'
    };
  }

  private getPersonalityResponse(personality: string): string {
    switch (personality) {
      case 'professional':
        return '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.';
      case 'friendly':
        return '–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! üòä';
      case 'analytical':
        return '–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç—Ä–∏–∫.';
      case 'creative':
        return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–¥–∞—á–∞! –ü—Ä–µ–¥–ª–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤.';
      case 'supportive':
        return '–ü–æ–¥–¥–µ—Ä–∂—É –≤–∞—Å –≤ —Ä–µ—à–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!';
      default:
        return '–†–∞—Å—Å–º–æ—Ç—Ä—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ.';
    }
  }

  async generateBusinessInsights(organizationData: any, salesData: any, customerData: any) {
    const insights = {
      salesTrends: this.analyzeSalesTrends(salesData),
      customerSegments: this.analyzeCustomerSegments(customerData),
      recommendations: this.generateRecommendations(salesData, customerData),
      kpis: this.calculateKPIs(salesData, customerData)
    };

    return insights;
  }

  private analyzeSalesTrends(salesData: any) {
    return {
      trend: 'growing',
      growthRate: 15.5,
      prediction: 'positive',
      seasonality: 'Q4 strong performance expected'
    };
  }

  private analyzeCustomerSegments(customerData: any) {
    return {
      enterprise: { count: 45, value: 'high' },
      smb: { count: 120, value: 'medium' },
      individual: { count: 230, value: 'low' }
    };
  }

  private generateRecommendations(salesData: any, customerData: any) {
    return [
      '–£–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–µ–≥–º–µ–Ω—Ç–µ enterprise –∫–ª–∏–µ–Ω—Ç–æ–≤',
      '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–ø "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã" –≤ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂',
      '–í–Ω–µ–¥—Ä–∏—Ç—å automated follow-up –¥–ª—è leads',
      '–†–∞–∑–≤–∏–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–¥–∞–∂'
    ];
  }

  private calculateKPIs(salesData: any, customerData: any) {
    return {
      conversionRate: 12.5,
      averageDealSize: 125000,
      salesCycleLength: 45,
      customerSatisfaction: 4.2
    };
  }
}