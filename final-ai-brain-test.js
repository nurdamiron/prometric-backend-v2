#!/usr/bin/env node

// FINAL AI BRAIN COMPREHENSIVE TEST
// Tests all components: Authentication, RAG, Conversations, Embeddings

const API_BASE = 'http://localhost:3333';
const TEST_USER = { email: 'aitest@prometric.kz', password: 'AiTest123!' };

async function makeRequest(endpoint, method = 'GET', data = null, token = null) {
  const url = `${API_BASE}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {})
    },
    ...(data ? { body: JSON.stringify(data) } : {})
  };

  try {
    const response = await fetch(url, options);
    const result = await response.json();
    return { status: response.status, success: response.ok, data: result };
  } catch (error) {
    return { status: 0, success: false, error: error.message };
  }
}

async function getAuthToken() {
  console.log('üîê Getting authentication token...');

  const result = await makeRequest('/test/get-token', 'POST', TEST_USER);

  if (!result.success) {
    throw new Error(`Authentication failed: ${JSON.stringify(result.data)}`);
  }

  console.log(`‚úÖ Authenticated as: ${result.data.user.email} (${result.data.user.role})`);
  console.log(`   Organization: ${result.data.user.organization.name} (${result.data.user.organization.bin})`);

  return result.data.access_token;
}

async function test1_AiCapabilities(token) {
  console.log('\nü§ñ TEST 1: AI Capabilities...');

  const result = await makeRequest('/ai/capabilities', 'GET', null, token);

  if (result.success) {
    console.log('‚úÖ AI capabilities loaded');
    console.log(`   Personalities: ${result.data.assistantPersonalities.length}`);
    console.log(`   Expertise areas: ${result.data.expertiseAreas.length}`);
    return true;
  } else {
    console.log('‚ùå AI capabilities failed:', result.data.message);
    return false;
  }
}

async function test2_ConfigureAssistant(token) {
  console.log('\n‚öôÔ∏è TEST 2: Configure AI Assistant...');

  const config = {
    assistantName: '–ê—Å–µ–º AI',
    personality: 'professional',
    expertise: ['CRM', '–ü—Ä–æ–¥–∞–∂–∏', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
    voicePreference: 'female'
  };

  const result = await makeRequest('/ai/assistant/configure', 'POST', config, token);

  if (result.success) {
    console.log(`‚úÖ AI Assistant configured: ${config.assistantName}`);
    console.log(`   Personality: ${config.personality}`);
    console.log(`   Expertise: ${config.expertise.join(', ')}`);
    return true;
  } else {
    console.log('‚ùå Assistant configuration failed:', result.data.message);
    return false;
  }
}

async function test3_AddKnowledge(token) {
  console.log('\nüìö TEST 3: Add Knowledge Content...');

  const knowledge = {
    title: 'Prometric CRM - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
    content: `
    Prometric CRM - —ç—Ç–æ –ø–µ—Ä–µ–¥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞.

    –û–°–ù–û–í–ù–´–ï –ú–û–î–£–õ–ò:
    1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
       - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
       - –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
       - –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π

    2. –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂
       - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
       - –≠—Ç–∞–ø—ã –ø—Ä–æ–¥–∞–∂
       - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏

    3. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
       - –û—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
       - –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
       - KPI –º–µ—Ç—Ä–∏–∫–∏

    4. AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
       - –ü–æ–º–æ—â—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
       - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
       - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

    –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –î–õ–Ø –ö–ê–ó–ê–•–°–¢–ê–ù–ê:
    - Kaspi Business –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    - –ë–∞–Ω–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (–•–∞–ª—ã–∫, –°–±–µ—Ä, –ê–¢–§)
    - 1C –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞
    - –ü–æ—á—Ç–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    - –≠–¶–ü –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ë–ò–ù –∫–æ–º–ø–∞–Ω–∏–π (12 —Ü–∏—Ñ—Ä)
    - –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å: —Ä—É—Å—Å–∫–∏–π, –∫–∞–∑–∞—Ö—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–ö
    - –û–±–ª–∞—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    `,
    accessLevel: 'public'
  };

  const result = await makeRequest('/ai/knowledge/add-manual-content', 'POST', knowledge, token);

  if (result.success) {
    console.log(`‚úÖ Knowledge added: "${knowledge.title}"`);
    console.log(`   Content: ${knowledge.content.length} characters`);
    return result.data.data;
  } else {
    console.log('‚ùå Knowledge addition failed:', result.data.message);
    return null;
  }
}

async function test4_RagSearch(token) {
  console.log('\nüîç TEST 4: RAG Knowledge Search...');

  const searchQuery = {
    query: '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–Ω–∫–∞–º–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
    maxResults: 3,
    includeChunks: true,
    hybridSearch: true
  };

  const result = await makeRequest('/ai/knowledge/search', 'POST', searchQuery, token);

  if (result.success) {
    console.log(`‚úÖ RAG search successful: ${result.data.resultsCount} results`);
    result.data.results.forEach((doc, i) => {
      console.log(`   ${i+1}. "${doc.title}" (${(doc.relevanceScore * 100).toFixed(1)}%)`);
    });
    return true;
  } else {
    console.log('‚ùå RAG search failed:', result.data.message);
    return false;
  }
}

async function test5_AiChat(token, sessionId = null) {
  console.log('\nüí¨ TEST 5: AI Chat with RAG...');

  const chatData = {
    message: sessionId ?
      '–ê –∫–∞–∫–∏–µ –µ—â–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å?' :
      '–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Prometric —Å –±–∞–Ω–∫–∞–º–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ.',
    priority: 'medium',
    ...(sessionId ? { sessionId } : {})
  };

  console.log(`   Query: "${chatData.message}"`);

  const result = await makeRequest('/ai/chat', 'POST', chatData, token);

  if (result.success) {
    console.log(`‚úÖ AI Chat successful!`);
    console.log(`   Assistant: ${result.data.assistant}`);
    console.log(`   Model: ${result.data.model}`);
    console.log(`   Tokens: ${result.data.tokensUsed}`);
    console.log(`   Sources: ${result.data.sources?.length || 0}`);
    console.log(`   Session: ${result.data.sessionId}`);
    console.log(`\nü§ñ Response (first 200 chars):`);
    console.log(`   ${result.data.content.substring(0, 200)}...`);

    return { success: true, sessionId: result.data.sessionId };
  } else {
    console.log('‚ùå AI Chat failed:', result.data.message);
    return { success: false };
  }
}

async function test6_ConversationContext(token, sessionId) {
  console.log('\nüó£Ô∏è TEST 6: Conversation Context...');

  return await test5_AiChat(token, sessionId);
}

async function validateResults(testResults) {
  console.log('\nüìä TEST RESULTS VALIDATION:');

  const criteria = {
    '‚úÖ Authentication': testResults.auth,
    '‚úÖ AI Capabilities': testResults.capabilities,
    '‚úÖ Assistant Config': testResults.assistantConfig,
    '‚úÖ Knowledge Addition': testResults.knowledgeAdd,
    '‚úÖ RAG Search': testResults.ragSearch,
    '‚úÖ AI Chat + RAG': testResults.aiChat,
    '‚úÖ Conversation Context': testResults.conversationContext
  };

  Object.entries(criteria).forEach(([test, passed]) => {
    console.log(`${passed ? '‚úÖ' : '‚ùå'} ${test}`);
  });

  const allPassed = Object.values(criteria).every(Boolean);

  console.log(`\nüéØ OVERALL RESULT: ${allPassed ? 'üéâ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);

  if (allPassed) {
    console.log('\nüß† AI BRAIN IS FULLY FUNCTIONAL:');
    console.log('- Vertex AI embeddings working');
    console.log('- RAG pipeline operational');
    console.log('- AI conversations with context');
    console.log('- Knowledge base integration');
    console.log('- Multi-tenant security');
  }

  return allPassed;
}

async function runCompleteTest() {
  console.log('üß† AI BRAIN COMPREHENSIVE TEST üß†\n');

  const testResults = {
    auth: false,
    capabilities: false,
    assistantConfig: false,
    knowledgeAdd: false,
    ragSearch: false,
    aiChat: false,
    conversationContext: false
  };

  try {
    // Authentication
    const token = await getAuthToken();
    testResults.auth = true;

    // Test AI capabilities
    testResults.capabilities = await test1_AiCapabilities(token);

    // Configure AI assistant
    testResults.assistantConfig = await test2_ConfigureAssistant(token);

    // Add knowledge
    const knowledgeResult = await test3_AddKnowledge(token);
    testResults.knowledgeAdd = !!knowledgeResult;

    // Test RAG search
    testResults.ragSearch = await test4_RagSearch(token);

    // Test AI chat
    const chatResult = await test5_AiChat(token);
    testResults.aiChat = chatResult.success;

    // Test conversation context
    if (chatResult.success && chatResult.sessionId) {
      const contextResult = await test6_ConversationContext(token, chatResult.sessionId);
      testResults.conversationContext = contextResult.success;
    }

    // Validate all results
    await validateResults(testResults);

  } catch (error) {
    console.error('\nüí• TEST FAILED:', error.message);
    await validateResults(testResults);
  }
}

runCompleteTest();